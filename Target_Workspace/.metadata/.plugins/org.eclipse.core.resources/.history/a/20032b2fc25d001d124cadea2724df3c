/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2022 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include<stdint.h>

int main(void)
{
	uint32_t  volatile *const pClkCtrlReg =   (uint32_t*)0x40023830;
	uint32_t  volatile *const pPortDModeReg = (uint32_t*)0x40020C00;
	uint32_t  volatile *const pPortDOutReg =  (uint32_t*)0x40020C14;

	uint32_t volatile *const pPortAModeReg = (uint32_t*)0x40020000;
	uint32_t const volatile *const pPortAInReg =   (uint32_t*)0x40020010;
	uint32_t *pPortAOutReg =  (uint32_t*)0x40020014;



	//enable the clock for GPOID , GPIOA peripherals in the AHB1ENR
	*pClkCtrlReg |= ( 1 << 3);

	//LED
	*pClkCtrlReg |= ( 1 << 0);

	//LED
	//2. configure the mode of the IO pin as output
	//a. clear the 10th and 11th bit positions (CLEAR)
	*pPortAModeReg &= ~( 3 << 10);		// 3 is 0b11 in binary =  1 for bit 10 and 1 for bit 11
	//b. make 10th bit position as 1 (SET)
	*pPortAModeReg |= ( 1 << 10);

	//Configure PA0 as input mode (GPIOA MODE REGISTER)
	*pPortAModeReg &= ~(3 << 0);

	while(1)
	{
		//read the pin status of the pin PA0 (GPIOA INPUT DATA REGISTER)
		uint8_t  pinStatus = (uint8_t)(*pPortAInReg & 0x1); //zero out all other bits except bit 0

		if(pinStatus){
			//turn on the LED
			*pPortAOutReg |= ( 1 << 5);
		}else{
			//turn off the LED
			*pPortAOutReg &= ~( 1 << 5);
		}
	}

}

